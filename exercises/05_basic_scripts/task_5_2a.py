# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip, mask = input("Введите IP-сети в формате: 10.1.1.0/24 : ").split('/')
m = str('1'*int(mask)+'0'*(32-int(mask)))
ip11, ip22, ip33, ip44 = str(bin(int(ip.split('.')[0])))[2:], str(bin(int(ip.split('.')[1])))[2:], \
                         str(bin(int(ip.split('.')[2])))[2:], str(bin(int(ip.split('.')[3])))[2:]
ip1, ip2, ip3, ip4 = '0'*(8-len(ip11))+ip11, '0'*(8-len(ip22))+ip22, '0'*(8-len(ip33))+ip33, '0'*(8-len(ip44))+ip44

IP1, IP2, IP3, IP4 = ip1[0:m[0:8].count('1')]+'0'*(8-len(ip1[0:m[0:8].count('1')])),\
                     ip2[0:m[8:16].count('1')]+'0'*(8-len(ip1[0:m[8:16].count('1')])), \
                     ip3[0:m[16:24].count('1')]+'0'*(8-len(ip1[0:m[16:24].count('1')])),\
                     ip4[0:m[24:32].count('1')]+'0'*(8-len(ip1[0:m[24:32].count('1')]))
print(IP1, IP2, IP3, IP4)
print("Network:\n{:<8} {:<8} {:<8} {:<8}\n{:8} {:8} {:8} {:8}\n".format(
    int(IP1, 2), int(IP2, 2), int(IP3, 2), int(IP4, 2), IP1, IP2, IP3, IP4),
    "Mask:\n/{:}\n{:<8} {:<8} {:<8} {:<8}\n{:<08} {:<08} {:<08} {:<08}".format(
        mask, int(m[0:8], 2), int(m[8:16], 2), int(m[16:24], 2), int(m[24:32], 2),
        int(m[0:8]), int(m[8:16]), int(m[16:24]), int(m[24:32])))

